[{"title":"Haskell Monad","url":"/2019/05/28/about-haskell-monad/","content":"<h4 id=\"monad-，麻烦的范畴论。\"><a href=\"#monad-，麻烦的范畴论。\" class=\"headerlink\" title=\"monad ，麻烦的范畴论。\"></a>monad ，麻烦的范畴论。</h4><p>学了一段时间的haskell ，被这个玩意搞智障了（还是说我本来就是个智障）。<br><a href=\"https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/\">这是一个haskell 范畴论的文章</a></p>\n","categories":["Diary","Program"],"tags":["随笔","Program","hasell"]},{"title":"csharp","url":"/2020/11/28/csharp/","content":"<h1 id=\"关于c\"><a href=\"#关于c\" class=\"headerlink\" title=\"关于c#\"></a>关于c#</h1><p>c#这个编程语言倒是很像java,不过没java那么啰嗦.还有异步函数，比java强点.</p>\n","categories":["program"],"tags":["csharp"]},{"title":"初步使用alex与happy进行语法分析","url":"/2020/09/12/abouthappy/","content":"<h1 id=\"alex-happy-初步使用\"><a href=\"#alex-happy-初步使用\" class=\"headerlink\" title=\"alex + happy 初步使用\"></a>alex + happy 初步使用</h1><h3 id=\"使用alex进行词法分析获取token流-alex文档\"><a href=\"#使用alex进行词法分析获取token流-alex文档\" class=\"headerlink\" title=\"使用alex进行词法分析获取token流 alex文档\"></a>使用alex进行词法分析获取token流 <a href=\"https://www.haskell.org/alex/doc/html/index.html\">alex文档</a></h3><ol>\n<li>这里有个简单的例子,后缀为x</li>\n</ol>\n<figure class=\"highlight haskell\"><table><tr><td class=\"code\"><pre><code class=\"hljs haskell\">&#123;<br><span class=\"hljs-keyword\">module</span> Lexer(<span class=\"hljs-title\">lexer</span>,<span class=\"hljs-type\">Token(..)</span>) <span class=\"hljs-keyword\">where</span><br>&#125;<br>%wrapper <span class=\"hljs-string\">&quot;basic&quot;</span><br>$digit = [<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">9</span>]<br>$alpha = [a-zA-<span class=\"hljs-type\">Z</span>]<br><br><span class=\"hljs-title\">tokens</span> :-<br>    $white+ ;<br>    <span class=\"hljs-keyword\">let</span> &#123;\\s -&gt; <span class=\"hljs-type\">TokenLet</span>&#125;<br>    <span class=\"hljs-keyword\">in</span>  &#123;\\s -&gt; <span class=\"hljs-type\">TokenIn</span>&#125;<br>    =   &#123;\\s -&gt; <span class=\"hljs-type\">TokenEq</span>&#125;<br>    \\+   &#123;\\s -&gt; <span class=\"hljs-type\">TokenPlus</span>&#125;<br>    \\-   &#123;\\s -&gt; <span class=\"hljs-type\">TokenMinus</span>&#125;<br>    \\*   &#123;\\s -&gt; <span class=\"hljs-type\">TokenTimes</span>&#125;<br>    \\/   &#123;\\s -&gt; <span class=\"hljs-type\">TokenDiv</span>&#125;<br>    \\(   &#123;\\s -&gt; <span class=\"hljs-type\">TokenOB</span>&#125;<br>    \\)   &#123;\\s -&gt; <span class=\"hljs-type\">TokenCB</span>&#125;<br>    $digit+ &#123;\\s -&gt; <span class=\"hljs-type\">TokenInt</span> (read s)&#125;<br>    $alpha+ &#123;\\s -&gt; <span class=\"hljs-type\">TokenVar</span> s&#125;<br>&#123;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span> <span class=\"hljs-type\">Token</span></span><br>    = <span class=\"hljs-type\">TokenLet</span><br>    | <span class=\"hljs-type\">TokenIn</span><br>    | <span class=\"hljs-type\">TokenInt</span> <span class=\"hljs-type\">Int</span><br>    | <span class=\"hljs-type\">TokenVar</span> <span class=\"hljs-type\">String</span><br>    | <span class=\"hljs-type\">TokenEq</span><br>    | <span class=\"hljs-type\">TokenPlus</span><br>    | <span class=\"hljs-type\">TokenMinus</span><br>    | <span class=\"hljs-type\">TokenTimes</span><br>    | <span class=\"hljs-type\">TokenDiv</span><br>    | <span class=\"hljs-type\">TokenOB</span><br>    | <span class=\"hljs-type\">TokenCB</span><br> <span class=\"hljs-keyword\">deriving</span>(<span class=\"hljs-type\">Show</span>,<span class=\"hljs-type\">Eq</span>)<br><br><span class=\"hljs-title\">lexer</span> :: <span class=\"hljs-type\">String</span> -&gt; [<span class=\"hljs-type\">Token</span>]<br><span class=\"hljs-title\">lexer</span> = alexScanTokens<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>导出的lexer ::String-&gt;[Token] 将字符串处理为Token流</li>\n</ol>\n<h3 id=\"使用happy进行语法分析生成ASThappy-文档\"><a href=\"#使用happy进行语法分析生成ASThappy-文档\" class=\"headerlink\" title=\"使用happy进行语法分析生成ASThappy 文档\"></a>使用happy进行语法分析生成AST<a href=\"https://www.haskell.org/happy/doc/html/index.html\">happy 文档</a></h3><ol>\n<li>例子，后缀为y</li>\n</ol>\n<figure class=\"highlight haskell\"><table><tr><td class=\"code\"><pre><code class=\"hljs haskell\">&#123;<br><span class=\"hljs-keyword\">module</span> Parser(<span class=\"hljs-title\">parse</span>,<span class=\"hljs-type\">Exp(..)</span>,<span class=\"hljs-type\">Exp1(..)</span>,<span class=\"hljs-type\">Term(..)</span>,<span class=\"hljs-type\">Factor(..)</span>) <span class=\"hljs-keyword\">where</span><br><span class=\"hljs-keyword\">import</span> Lexer<br>&#125;<br>%name parse<br>%tokentype &#123;<span class=\"hljs-type\">Token</span>&#125;<br>%error &#123;parseError&#125;<br>%token<br>    <span class=\"hljs-keyword\">let</span> &#123;<span class=\"hljs-type\">TokenLet</span>&#125;<br>    <span class=\"hljs-keyword\">in</span>  &#123;<span class=\"hljs-type\">TokenIn</span>&#125;<br>    int &#123;<span class=\"hljs-type\">TokenInt</span> $$&#125;<br>    var &#123;<span class=\"hljs-type\">TokenVar</span> $$&#125;<br>    &#x27;=&#x27; &#123;<span class=\"hljs-type\">TokenEq</span>&#125;<br>    &#x27;+&#x27; &#123;<span class=\"hljs-type\">TokenPlus</span>&#125;<br>    &#x27;-&#x27; &#123;<span class=\"hljs-type\">TokenMinus</span>&#125;<br>    &#x27;*&#x27; &#123;<span class=\"hljs-type\">TokenTimes</span>&#125;<br>    &#x27;/&#x27; &#123;<span class=\"hljs-type\">TokenDiv</span>&#125;<br>    &#x27;(&#x27; &#123;<span class=\"hljs-type\">TokenOB</span>&#125;<br>    &#x27;)&#x27; &#123;<span class=\"hljs-type\">TokenCB</span>&#125;<br>%%<br><span class=\"hljs-type\">Exp</span>   : <span class=\"hljs-keyword\">let</span> var &#x27;=&#x27; <span class=\"hljs-type\">Exp</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-type\">Exp</span>  &#123; <span class=\"hljs-type\">Let</span> $<span class=\"hljs-number\">2</span> $<span class=\"hljs-number\">4</span> $<span class=\"hljs-number\">6</span> &#125;<br>      | <span class=\"hljs-type\">Exp1</span>                    &#123; <span class=\"hljs-type\">Exp1</span> $<span class=\"hljs-number\">1</span> &#125;<br><br><span class=\"hljs-type\">Exp1</span>  : <span class=\"hljs-type\">Exp1</span> &#x27;+&#x27; <span class=\"hljs-type\">Term</span>           &#123; <span class=\"hljs-type\">Plus</span> $<span class=\"hljs-number\">1</span> $<span class=\"hljs-number\">3</span> &#125;<br>      | <span class=\"hljs-type\">Exp1</span> &#x27;-&#x27; <span class=\"hljs-type\">Term</span>           &#123; <span class=\"hljs-type\">Minus</span> $<span class=\"hljs-number\">1</span> $<span class=\"hljs-number\">3</span> &#125;<br>      | <span class=\"hljs-type\">Term</span>                    &#123; <span class=\"hljs-type\">Term</span> $<span class=\"hljs-number\">1</span> &#125;<br><br><span class=\"hljs-type\">Term</span>  : <span class=\"hljs-type\">Term</span> &#x27;*&#x27; <span class=\"hljs-type\">Factor</span>         &#123; <span class=\"hljs-type\">Times</span> $<span class=\"hljs-number\">1</span> $<span class=\"hljs-number\">3</span> &#125;<br>      | <span class=\"hljs-type\">Term</span> &#x27;/&#x27; <span class=\"hljs-type\">Factor</span>         &#123; <span class=\"hljs-type\">Div</span> $<span class=\"hljs-number\">1</span> $<span class=\"hljs-number\">3</span> &#125;<br>      | <span class=\"hljs-type\">Factor</span>                  &#123; <span class=\"hljs-type\">Factor</span> $<span class=\"hljs-number\">1</span> &#125;<br><br><span class=\"hljs-type\">Factor</span>\t\t\t  <br>      : int                     &#123; <span class=\"hljs-type\">Int</span> $<span class=\"hljs-number\">1</span> &#125;<br>      | var                     &#123; <span class=\"hljs-type\">Var</span> $<span class=\"hljs-number\">1</span> &#125;<br>      | &#x27;(&#x27; <span class=\"hljs-type\">Exp</span> &#x27;)&#x27;             &#123; <span class=\"hljs-type\">Brack</span> $<span class=\"hljs-number\">2</span> &#125;<br>&#123;<br><span class=\"hljs-title\">parseError</span> :: [<span class=\"hljs-type\">Token</span>] -&gt; a<br><span class=\"hljs-title\">parseError</span> _ = error <span class=\"hljs-string\">&quot;Parse error&quot;</span><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span> <span class=\"hljs-type\">Exp</span>  </span><br>      = <span class=\"hljs-type\">Let</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-type\">Exp</span> <span class=\"hljs-type\">Exp</span><br>      | <span class=\"hljs-type\">Exp1</span> <span class=\"hljs-type\">Exp1</span><br>      <span class=\"hljs-keyword\">deriving</span> <span class=\"hljs-type\">Show</span><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span> <span class=\"hljs-type\">Exp1</span> </span><br>      = <span class=\"hljs-type\">Plus</span> <span class=\"hljs-type\">Exp1</span> <span class=\"hljs-type\">Term</span> <br>      | <span class=\"hljs-type\">Minus</span> <span class=\"hljs-type\">Exp1</span> <span class=\"hljs-type\">Term</span> <br>      | <span class=\"hljs-type\">Term</span> <span class=\"hljs-type\">Term</span><br>      <span class=\"hljs-keyword\">deriving</span> <span class=\"hljs-type\">Show</span><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span> <span class=\"hljs-type\">Term</span> </span><br>      = <span class=\"hljs-type\">Times</span> <span class=\"hljs-type\">Term</span> <span class=\"hljs-type\">Factor</span> <br>      | <span class=\"hljs-type\">Div</span> <span class=\"hljs-type\">Term</span> <span class=\"hljs-type\">Factor</span> <br>      | <span class=\"hljs-type\">Factor</span> <span class=\"hljs-type\">Factor</span><br>      <span class=\"hljs-keyword\">deriving</span> <span class=\"hljs-type\">Show</span><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span> <span class=\"hljs-type\">Factor</span> </span><br>      = <span class=\"hljs-type\">Int</span> <span class=\"hljs-type\">Int</span> <br>      | <span class=\"hljs-type\">Var</span> <span class=\"hljs-type\">String</span> <br>      | <span class=\"hljs-type\">Brack</span> <span class=\"hljs-type\">Exp</span><br>      <span class=\"hljs-keyword\">deriving</span> <span class=\"hljs-type\">Show</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n<ol start=\"2\">\n<li>导出的parse ::[Token]-&gt;Exp 将Token流处理为AST</li>\n</ol>\n<h3 id=\"将lexer-parse-复合即可构成String-gt-Exp的函数\"><a href=\"#将lexer-parse-复合即可构成String-gt-Exp的函数\" class=\"headerlink\" title=\"将lexer,parse 复合即可构成String-&gt;Exp的函数\"></a>将lexer,parse 复合即可构成String-&gt;Exp的函数</h3><p><img src=\"/images/alex_happy.png\"></p>\n<h6 id=\"链接测试-学过的语言\"><a href=\"#链接测试-学过的语言\" class=\"headerlink\" title=\"链接测试: 学过的语言\"></a>链接测试: <a href=\"../../public/2019/06/12/program-language/index.html\">学过的语言</a></h6>","categories":["Program","编程"],"tags":["haskell"]},{"title":"My First Blog","url":"/2019/04/02/first-md/","content":"<h2 id=\"第一个博客，要好好加油。\"><a href=\"#第一个博客，要好好加油。\" class=\"headerlink\" title=\"第一个博客，要好好加油。\"></a>第一个博客，要好好加油。</h2><p>今天我试着玩了一下llvm的jit例子,但是在运行后却得到了一个error.<br>在网上到处找了一下，发现在INITIALIZE TARGET 后添加以下的代码可以解决我的问题。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-built_in\">LLVMInitializeNativeAsmPrinter</span>();<br><span class=\"hljs-built_in\">LLVMInitializeNativeAsmParser</span>();<br></code></pre></td></tr></table></figure>\n<p>奇怪为什么官方的代码会有问题。</p>\n","categories":["Diary"],"tags":["随笔"]},{"title":"编写idea 插件，已通过插件来使用lua 间接控制idea","url":"/2019/05/29/idea-lua-script/","content":"<h4 id=\"使用了idea这么久，总觉得Idea缺少自动脚本控制的机制（或许是我自己不知道），于是决定自己写一个插件来通过载入lua脚本控制idea。\"><a href=\"#使用了idea这么久，总觉得Idea缺少自动脚本控制的机制（或许是我自己不知道），于是决定自己写一个插件来通过载入lua脚本控制idea。\" class=\"headerlink\" title=\"使用了idea这么久，总觉得Idea缺少自动脚本控制的机制（或许是我自己不知道），于是决定自己写一个插件来通过载入lua脚本控制idea。\"></a>使用了idea这么久，总觉得Idea缺少自动脚本控制的机制（或许是我自己不知道），于是决定自己写一个插件来通过载入lua脚本控制idea。</h4><h5 id=\"通过这个项目顺便学习一下idea-plugin-的制作与lua\"><a href=\"#通过这个项目顺便学习一下idea-plugin-的制作与lua\" class=\"headerlink\" title=\"通过这个项目顺便学习一下idea plugin 的制作与lua.\"></a>通过这个项目顺便学习一下idea plugin 的制作与lua.</h5><p>关于idea plugin 的api可以参考<a href=\"http://www.jetbrains.org/intellij/sdk/docs/welcome.html\">IntelliJ Platform SDK</a><br>java通过luaj 来使用lua。<br><a href=\"https://github.com/hand13/idealuascript.git\">这是我的github项目</a><br>现在还不是很完善，后面会持续更新。</p>\n","categories":["Diary","Program"],"tags":["随笔","Program","idea","plugin"]},{"title":"使用java 储存Sql Server 精确到毫秒的datetime","url":"/2019/04/22/java-sql-server-date/","content":"<h1 id=\"使用java-储存Sql-Server-精确到毫秒的datetime\"><a href=\"#使用java-储存Sql-Server-精确到毫秒的datetime\" class=\"headerlink\" title=\"使用java 储存Sql Server 精确到毫秒的datetime\"></a>使用java 储存Sql Server 精确到毫秒的datetime</h1><p>使用SimpleDateFormat,pattern 设置为”yyyy-MM-dd HH:mm:ss.SSS”,格式化java.util.Date.<br>将生成的字符串插入sql server.<br>取date数据应该用timestamp。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">SimpleDateFormat</span> <span class=\"hljs-variable\">dateFormat</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleDateFormat</span>(<span class=\"hljs-string\">&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;</span>);<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">date</span> <span class=\"hljs-operator\">=</span> dateFormat.format(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br></code></pre></td></tr></table></figure>\n","categories":["Diary","Program"],"tags":["随笔","Program","java","sqlserver","datetime"]},{"title":"至今为止尝试学习过的c/cpp 库","url":"/2019/06/13/library-learned/","content":"<h2 id=\"至今为止尝试学习过的c-x2F-cpp库\"><a href=\"#至今为止尝试学习过的c-x2F-cpp库\" class=\"headerlink\" title=\"至今为止尝试学习过的c&#x2F;cpp库\"></a>至今为止尝试学习过的c&#x2F;cpp库</h2><ol>\n<li><font color=red>boost</font></li>\n<li>ffmpeg</li>\n<li>libmad</li>\n<li>sdl2</li>\n<li>qt</li>\n<li>gtk</li>\n<li>opengl</li>\n<li>opencv</li>\n<li>dx</li>\n</ol>\n<p>还是写太少了。</p>\n","tags":["program library"]},{"title":"newYear","url":"/2020/01/20/newYear/","content":"<h1 id=\"又是没有收获的一年\"><a href=\"#又是没有收获的一年\" class=\"headerlink\" title=\"又是没有收获的一年\"></a>又是没有收获的一年</h1><h2 id=\"希望明年可以好一点吧\"><a href=\"#希望明年可以好一点吧\" class=\"headerlink\" title=\"希望明年可以好一点吧\"></a>希望明年可以好一点吧</h2>","tags":["dairy"]},{"title":"尝试编写一个操作系统","url":"/2019/05/28/my-os-first/","content":"<h4 id=\"通过学习github-上的os-tutorial项目-尝试编写一个简单的操作系统，学习计算机底层知识。\"><a href=\"#通过学习github-上的os-tutorial项目-尝试编写一个简单的操作系统，学习计算机底层知识。\" class=\"headerlink\" title=\"通过学习github 上的os-tutorial项目 尝试编写一个简单的操作系统，学习计算机底层知识。\"></a>通过学习<a href=\"https://github.com/cfenollosa/os-tutorial.git\">github 上的os-tutorial项目</a> 尝试编写一个简单的操作系统，学习计算机底层知识。</h4>","categories":["Diary","Program"],"tags":["随笔","Program","OS","x86","c","asm"]},{"title":"学习opengl(一)","url":"/2019/11/21/opengl-learning/","content":"<h2 id=\"学习opengl-一\"><a href=\"#学习opengl-一\" class=\"headerlink\" title=\"学习opengl(一)\"></a>学习opengl(一)</h2>"},{"title":"至今为止尝试学习过的编程语言","url":"/2019/06/12/program-language/","content":"<h2 id=\"至今为止尝试学习过的编程语言\"><a href=\"#至今为止尝试学习过的编程语言\" class=\"headerlink\" title=\"至今为止尝试学习过的编程语言\"></a>至今为止尝试学习过的编程语言</h2><ol>\n<li><font color=red>c</font></li>\n<li>R</li>\n<li>oc</li>\n<li>cpp</li>\n<li>lua</li>\n<li>java</li>\n<li>rust</li>\n<li>scheme</li>\n<li>matlab</li>\n<li>haskell</li>\n<li>clojure</li>\n<li>javascript</li>\n<li>swift</li>\n<li>common lisp</li>\n<li>python</li>\n<li>php</li>\n<li>perl</li>\n<li>c#</li>\n<li>ruby</li>\n<li>sql</li>\n<li>erlang</li>\n<li>scala</li>\n<li>groovy</li>\n<li>assembly language</li>\n<li>kotlin</li>\n</ol>\n<p>一堆半途而废的。</p>\n","tags":["program language"]},{"title":"Scheme","url":"/2019/07/06/scheme/","content":"<h1 id=\"Scheme-笔记\"><a href=\"#Scheme-笔记\" class=\"headerlink\" title=\"Scheme 笔记\"></a>Scheme 笔记</h1><h2 id=\"Scheme-是一个语法非常精简的函数式语言，作为lisp-语言的一份子同样也有着总多的实现。\"><a href=\"#Scheme-是一个语法非常精简的函数式语言，作为lisp-语言的一份子同样也有着总多的实现。\" class=\"headerlink\" title=\"Scheme 是一个语法非常精简的函数式语言，作为lisp 语言的一份子同样也有着总多的实现。\"></a>Scheme 是一个语法非常精简的函数式语言，作为lisp 语言的一份子同样也有着总多的实现。</h2><p>我在学习Scheme的时候主要使用的是<a href=\"https://github.com/cisco/ChezScheme.git\">Chez Scheme</a>.文档可以<a href=\"https://www.scheme.com/tspl4/\">参考</a>,<br>这个实现已经开源在github上了.</p>\n<h3 id=\"Scheme-的语法非常简洁，由S表达式构成-通常是-A-B-C-这样的形式。部分常用的数据结构存在字面量。可以使用宏定义自己的语法结构。\"><a href=\"#Scheme-的语法非常简洁，由S表达式构成-通常是-A-B-C-这样的形式。部分常用的数据结构存在字面量。可以使用宏定义自己的语法结构。\" class=\"headerlink\" title=\"Scheme 的语法非常简洁，由S表达式构成,通常是(A B C)这样的形式。部分常用的数据结构存在字面量。可以使用宏定义自己的语法结构。\"></a>Scheme 的语法非常简洁，由S表达式构成,通常是(A B C)这样的形式。部分常用的数据结构存在字面量。可以使用宏定义自己的语法结构。</h3><p>关键字主要是 define lambda:</p>\n<ol>\n<li>用来将值与变量绑定的define.<br>(define a 12)</li>\n</ol>\n<p>(define a (+ 12 12))<br>2. 用来编写lambda 表达式的lambda.<br>(lambda (x) (+ x x))</p>\n<p>(define b (lambda (x) (+ x x)))</p>\n<p>(b 12)<br>3. let<br>4. 在scheme中函数的命名存在模式,!后缀意味着该函数可能<br>会改变状态，?意味着该函数会返回一个布尔值.</p>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型.\"></a>数据类型.</h3><ol>\n<li>数字，不区分浮点与整形.</li>\n<li>字符串.</li>\n<li>布尔类型.字面量 #f 为false,#t 为true.</li>\n<li>符号类型，以“ ‘ ”开头，scheme 不会对 ‘ 后面的符号求值.<br>(define w ‘(a b c d))</li>\n<li>record类型.</li>\n<li>port类型，用于IO.</li>\n</ol>\n","categories":["Diary","Program"],"tags":["随笔","Program","hasell"]},{"title":"rocket","url":"/2019/09/09/rocket/","content":"<h1 id=\"learning-rust-rocket\"><a href=\"#learning-rust-rocket\" class=\"headerlink\" title=\"learning rust rocket\"></a>learning rust rocket</h1>"},{"title":"Spring Redis Session","url":"/2019/05/07/ssm-redis/","content":"<h1 id=\"通过Spring-Session实现Session的共享\"><a href=\"#通过Spring-Session实现Session的共享\" class=\"headerlink\" title=\"通过Spring Session实现Session的共享\"></a>通过Spring Session实现Session的共享</h1><ol>\n<li><p>通过maven导入相关的依赖。</p>\n</li>\n<li><p>在web.xml中添加如下Filter.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter-name</span>&gt;</span>springSessionRepositoryFilter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter-name</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter-class</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter-mapping</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter-name</span>&gt;</span>springSessionRepositoryFilter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter-name</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url-pattern</span>&gt;</span>/*<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url-pattern</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>在spring 配置文件中导入如下bean</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li>\n<li><p>完成后多个application就可以访问共用session.</p>\n</li>\n</ol>\n","categories":["Diary","Program"],"tags":["随笔","Program","java","spring","redis"]},{"title":"坑爹的ps4","url":"/2019/04/06/ps4-1/","content":"<h1 id=\"坑爹的ps4\"><a href=\"#坑爹的ps4\" class=\"headerlink\" title=\"坑爹的ps4\"></a>坑爹的ps4</h1><p>在我成迷于swith异度之刃之后，我大概一个月没有使用ps4，然后TA就坏了。电源键按了也没有反应。<br>在网上查了一下，我怀疑是ps4 内置电源出了问题。试这把ps4拆机。在没有链接茶座的情况下，他的电源模块居然还带电，简直了。<br>并且电压还很高对样子，足以电伤你的皮肤， 我就不幸的中招了。</p>\n<p>拆ps4 slim 的电源模块时不仅要把电源那一测的螺丝拧下，还要把另一面的一个固定的螺丝拧下来。（我也是在bilibili 上看了个视频才知道的）</p>\n<p><img src=\"/images/ps4_1.jpg\"></p>\n<p><img src=\"/images/ps4_2.jpg\"></p>\n<p><img src=\"/images/ps4_3.jpg\"></p>\n","categories":["Diary"],"tags":["随笔","ps4"]},{"title":"test","url":"/2022/06/12/test/","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"spring 整合mybatis 无法解析占位符","url":"/2019/04/26/ssm-mybatis/","content":"<h1 id=\"spring-整合mybatis-无法解析占位符\"><a href=\"#spring-整合mybatis-无法解析占位符\" class=\"headerlink\" title=\"spring 整合mybatis 无法解析占位符\"></a>spring 整合mybatis 无法解析占位符</h1><p>整合spring 与mybatis 发现用MapperScannverConfigurer自动配置Mapper时，datasource 无法解析占位符。<br>代码如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;dataSource&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span></span><br><span class=\"hljs-tag\">         <span class=\"hljs-attr\">p:driverClassName</span>=<span class=\"hljs-string\">&quot;$&#123;datasource.driver&#125;&quot;</span></span><br><span class=\"hljs-tag\">         <span class=\"hljs-attr\">p:url</span>=<span class=\"hljs-string\">&quot;$&#123;datasource.url&#125;&quot;</span></span><br><span class=\"hljs-tag\">         <span class=\"hljs-attr\">p:username</span>=<span class=\"hljs-string\">&quot;$&#123;datasource.username&#125;&quot;</span></span><br><span class=\"hljs-tag\">         <span class=\"hljs-attr\">p:password</span>=<span class=\"hljs-string\">&quot;$&#123;datasource.password&#125;&quot;</span></span><br><span class=\"hljs-tag\">         <span class=\"hljs-attr\">p:defaultAutoCommit</span>=<span class=\"hljs-string\">&quot;false&quot;</span></span><br><span class=\"hljs-tag\">         <span class=\"hljs-attr\">destroy-method</span>=<span class=\"hljs-string\">&quot;close&quot;</span>/&gt;</span><br><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;sqlSessionFactory&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">p:dataSource-ref</span>=<span class=\"hljs-string\">&quot;dataSource&quot;</span> <span class=\"hljs-attr\">p:configLocation</span>=<span class=\"hljs-string\">&quot;classpath:mybatis.xml&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">p:mapperLocations</span>=<span class=\"hljs-string\">&quot;classpath:mapper/*.xml&quot;</span>/&gt;</span><br><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;sqlSessionTemplate&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span><br>       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;sqlSessionFactory&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;sqlSessionFactory&quot;</span></span><br><span class=\"hljs-tag\">                        <span class=\"hljs-attr\">index</span>=<span class=\"hljs-string\">&quot;0&quot;</span>/&gt;</span><br>   <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span></span><br><span class=\"hljs-tag\">        <span class=\"hljs-attr\">p:sqlSessionFactory-ref</span>=<span class=\"hljs-string\">&quot;sqlSessionFactory&quot;</span></span><br><span class=\"hljs-tag\">         <span class=\"hljs-attr\">p:basePackage</span>=<span class=\"hljs-string\">&quot;com.superdata.data.dao&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure>\n<p>经过百度上的一顿操作之后我我了解到应该是<strong>Confirurer 的加载在placeholder之前，导致datasource直接使用了<br>占位符而不是解析后的字符串</strong>。</p>\n<p>要解决这个问题可以将Configurer 的配置中的 <em>p:sqlSessionFactory-ref&#x3D;”sqlSessionFactory”</em> 删除。</p>\n","categories":["Diary","Program"],"tags":["随笔","Program","java","spring","mybatis"]},{"title":"vim 与 vimscript","url":"/2019/08/03/vimscript/","content":"<h6 id=\"本人是半桶水，如果有谁不幸看到这篇文章建议点X\"><a href=\"#本人是半桶水，如果有谁不幸看到这篇文章建议点X\" class=\"headerlink\" title=\"本人是半桶水，如果有谁不幸看到这篇文章建议点X\"></a>本人是半桶水，如果有谁不幸看到这篇文章建议点X</h6><h5 id=\"前言：-vim，上古神器-编辑器之神\"><a href=\"#前言：-vim，上古神器-编辑器之神\" class=\"headerlink\" title=\"前言： vim，上古神器,编辑器之神.\"></a>前言： vim，上古神器,编辑器之神.</h5><p>我所知道的常用的ide与编辑器基本都有vim模式(当然都没有vimscript解析,只有vim 风格的按键模式.所以说还是用vim啦,毕竟插件骚操作多).<br>一套按键模式，走遍天下都不怕,妈妈再也不用担心我记不住快捷键了,不学不是人。</p>\n<h2 id=\"vim-常用-与vimscript基础\"><a href=\"#vim-常用-与vimscript基础\" class=\"headerlink\" title=\"vim 常用 与vimscript基础\"></a>vim 常用 与vimscript基础</h2><p>vim 的配置文件为$HOME&#x2F;.vimrc,通过将路径添加到rpt变量中来改变vim加载vimscript的路径。<br>常见对象有buffer,window,tab。编辑文件时之间操作的是buffer,通过指令(w)保存后才会写入到<br>对应的文件里.</p>\n<h3 id=\"vim-工作时有四种模式\"><a href=\"#vim-工作时有四种模式\" class=\"headerlink\" title=\"vim 工作时有四种模式\"></a>vim 工作时有四种模式</h3><ol>\n<li>insert模式:在此模式下进行字符输入,可以按i进入.</li>\n<li>visual模式:在模式下可以选择字符,按v,V进入.</li>\n<li>normal模式:在此模式可以进行各种文本操作,如移动，删除,esc进入.</li>\n<li>command模式:normal 模式下按:进入,command 模式下输入的指令与vimscript语法一致<h3 id=\"vim-指令\"><a href=\"#vim-指令\" class=\"headerlink\" title=\"vim 指令\"></a>vim 指令</h3>normal 模式下 [range]com,range 表范围，一般为行号,逗号分隔：<br>hjkl进行移动操作,x,d进行删除操作,r替换操作之类<h3 id=\"通过set-可以改变vim的一些option\"><a href=\"#通过set-可以改变vim的一些option\" class=\"headerlink\" title=\"通过set 可以改变vim的一些option:\"></a>通过set 可以改变vim的一些option:</h3>如 set number–显示行号，set nonumber–不显示行号<br>set number? —显示设置的number的值.<h3 id=\"通过map-来进行按键映射\"><a href=\"#通过map-来进行按键映射\" class=\"headerlink\" title=\"通过map 来进行按键映射.\"></a>通过map 来进行按键映射.</h3>map 分为3种,分别对应于三种模式,imap,vmap.nmap.<br>在map 前加上nore可以关闭递归求值,inoremap.vnoremap.nnoremap<br>实例:inoremap jk <ESC>,insert 模式下将jk映射值esc键<h3 id=\"vimscript\"><a href=\"#vimscript\" class=\"headerlink\" title=\"vimscript\"></a>vimscript</h3></li>\n<li>各种c系控制流程语句.if—endif,while—endwhile,for—-endfor</li>\n<li>函数,function—endfunction</li>\n<li>let 绑定变量.变量通过加前缀来表示作用域，如s,a,g,b,l<br>let l:filename &#x3D; xxx.txt<h5 id=\"先这样吧，东西太多，还是直接看资料来的实在learn-vimscript-the-hard-way\"><a href=\"#先这样吧，东西太多，还是直接看资料来的实在learn-vimscript-the-hard-way\" class=\"headerlink\" title=\"先这样吧，东西太多，还是直接看资料来的实在learn vimscript the hard way\"></a>先这样吧，东西太多，还是直接看资料来的实在<a href=\"http://learnvimscriptthehardway.stevelosh.com/\">learn vimscript the hard way</a></h5></li>\n</ol>\n","categories":["Diary"],"tags":["Program","vim"]},{"title":"使用turbo-jpeg 解码jpeg 图片，再用SDL2显示。","url":"/2019/04/15/turbo-jpeg/","content":"<h1 id=\"使用turbo-jpeg-解码jpeg-图片，对解码后的数据进行一些处理，再用SDL2显示。\"><a href=\"#使用turbo-jpeg-解码jpeg-图片，对解码后的数据进行一些处理，再用SDL2显示。\" class=\"headerlink\" title=\"使用turbo-jpeg 解码jpeg 图片，对解码后的数据进行一些处理，再用SDL2显示。\"></a>使用turbo-jpeg 解码jpeg 图片，对解码后的数据进行一些处理，再用SDL2显示。</h1><p>使用turbo时，应该先调用对应的init方法进行初始化，在解码&#x2F;编码。<br>在使用过程中可以compressHeader来获取图片的大体信息。<br>sdl2显示RGB内存数据时，可以先creatergbsurface来得到sufaface,在通过surface<br>来创建texture,最后通过sdl 显示texture(renderpresent).</p>\n","categories":["Diary","Program"],"tags":["随笔","Program","cpp","SDL2","jpeg"]}]